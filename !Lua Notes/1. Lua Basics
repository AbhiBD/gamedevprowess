Selection:

-- one "end" per conditional loop
-- no colons after selection statements (unlike python)
-- follows the structure:

if variable <condition> then
    <statements>
end
    
e.g. 

if condition = 25 then
    print("this sentence is displayed")
end

-- to add more statements use functions else and elseif

e.g.

if variable <condition> then
    <statements>
elseif <condition> then
    <statements>
else
    <statements>
end


Loops:

While loops:

-- follows the structure:

while variable <condition> do
    <statements>
end

e.g.

while message < 10 do
    message = message + 1
    test = test - 5
end

For loops:

-- increment value isnt needed (assumed to be 1)
-- follows the structure:

for <iterator>, <maxvalue>, <increment> do
    <statements>
end

e.g.

for i=1, 3, 1 do
    pickle = "smelly abhi hes indian"
    print(pickle)
end


Functions:

-- can have as many paramters as u want
-- returning and calling works the same as python
-- follows the structure:

function <functionname>(<parameters>)
    <statements>
end

OR 

function <functionname>(<parameters>)
    <statements>
    return <variable>
end

e.g.

function increaseMessage(foo, val, me)
    message = message + foo
end

increaseMessage(99, 6 , 12)

print(message)

-- if message = 0 it will print 99


Comments:

-- for a single line of comments

--[[for 
multi
line]]


Local and Global Variables:

-- use "local" to make variables local

e.g.

function greedyjews(foo)
    local var = foo
    var = var*1000000000000000000000000000
    return var
end

jewmoney = greedyjews(100)

-- if a variable name is local it can be used in other functions 


Tables:

-- indexing starts at 1?!?!?!?!?!?!??!
-- same behaviour as python (bad boy)
-- follows the structure:

table1 = {<element1>, <element2>, <etc>}

-- to assign values at indexes:

e.g.

table1[1] = 10

-- index doesnt have to be a number 
-- can be accessed along with all other values with the pairs function in a loop
--(go down in notes)

e.g.

table1["hello"] = 90
message = table1["hello"]
print(message)

-- will print 90

-- to print a string index:
-- follows the structure:

print(table1.hello)

To Append:

-- doesnt take an index
-- follows the structure:

table.insert(<tablename>, <value>)

To access all values sequentially:

-- cant print all variables like python (need to use ipairs or pairs function and 
-- print variable at each index)
-- follows the structure:

for <index>, <variable> in ipairs(<table>)
    print(<variable>)
end

for <index>, <variable> in pairs(<table>)
    print(<variable>)
end

e.g.1

for i,s in ipairs(table1)
    print(s)
end

-- prints all values stored in integer indexes from the start to end values of the table

e.g.2

for i,s in pairs(table1)
    print(s)
end

-- will print all values even with string indexes 
-- such as table1["hello"] = 5

-- u can assign properties to a table
-- follows the structure:

<table>.<property> = <stringproperty>

e.g.

testScores.subject = "math"

-is the same as 

testScores["subject"] = "math"

-- allows for different tables to be part of the same subject 











